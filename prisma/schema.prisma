generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         String                   @id @default(uuid())
  name                       String
  email                      String                   @unique
  password                   String
  verificationCode           String?
  verificationCodeExpiration DateTime?
  validated                  Boolean                  @default(false)
  updatedAt                  DateTime                 @updatedAt
  createdAt                  DateTime                 @default(now())
  Expenses                   Expense[]
  Income                     Income[]
  SharedTransactionGroup     SharedTransactionGroup[]
  TransactionGroup           TransactionGroup[]
  Balance                    Balance[]
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  type      String
  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())
  Expense   Expense[]
  Income    Income[]
}

model Expense {
  id                 String            @id @default(uuid())
  amount             Float
  description        String
  date               DateTime
  category           Category          @relation(fields: [categoryId], references: [id])
  categoryId         String
  user               User              @relation(fields: [userId], references: [id])
  userId             String
  transactionGroup   TransactionGroup? @relation(fields: [transactionGroupId], references: [id])
  transactionGroupId String?
  updatedAt          DateTime          @updatedAt
  createdAt          DateTime          @default(now())
}

model Income {
  id                 String            @id @default(uuid())
  amount             Float
  description        String
  date               DateTime
  category           Category          @relation(fields: [categoryId], references: [id])
  categoryId         String
  user               User              @relation(fields: [userId], references: [id])
  userId             String
  transactionGroup   TransactionGroup? @relation(fields: [transactionGroupId], references: [id])
  transactionGroupId String?
  updatedAt          DateTime          @updatedAt
  createdAt          DateTime          @default(now())
}

enum TransactionGroupType {
  INCOME
  EXPENSE
}

model TransactionGroup {
  id                     String                   @id @default(uuid())
  name                   String
  description            String
  totalAmount            Float                    @default(0)
  isDefault              Boolean                  @default(false)
  month                  MonthType
  year                   String
  type                   TransactionGroupType
  expenses               Expense[]
  incomes                Income[]
  sharedTransactionGroup SharedTransactionGroup[]
  groupOwner             User?                    @relation(fields: [userId], references: [id])
  userId                 String?
  updatedAt              DateTime                 @updatedAt
  createdAt              DateTime                 @default(now())
}

enum MonthType {
  JANUARY
  FEBRUARY
  MARCH
  APRIL
  MAY
  JUNE
  JULY
  AUGUST
  SEPTEMBER
  OCTOBER
  NOVEMBER
  DECEMBER
}

model Balance {
  id           String    @id @default(uuid())
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  incomeTotal  Float     @default(0)
  expenseTotal Float     @default(0)
  balance      Float     @default(0)
  month        MonthType
  year         String
  updatedAt    DateTime  @updatedAt
  createdAt    DateTime  @default(now())
}

model SharedTransactionGroup {
  id                 String           @id @default(uuid())
  transactionGroup   TransactionGroup @relation(fields: [transactionGroupId], references: [id])
  transactionGroupId String
  sharedWith         User             @relation(fields: [userId], references: [id])
  userId             String
  updatedAt          DateTime         @updatedAt
  createdAt          DateTime         @default(now())
}
